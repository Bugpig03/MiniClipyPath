<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AD///mf///5j///+Y////gP///4H////B/8=
</value>
  </data>
</root>